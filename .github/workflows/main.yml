name: CI
on: [push]
jobs:
  # C implementation. Lives in c/, tested with bazel.
  test-c:
    runs-on: ubuntu-latest
    env:
      OLC_PATH: c
    steps:
      - uses: actions/setup-python@v2
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pandas
          pip install numpy
      - run: sudo apt update
      - run: sudo apt install inotify-tools
      - run: inotifywait -mr /home/runner/work --format '%T;%w;%f;%e' --timefmt %T -o /home/runner/test.csv & echo 'basak'
      - run: touch starting_testc_uses_10
      - run: rm starting_testc_uses_10
      - uses: actions/checkout@v2
      - run: touch starting_testc_test_11
      - run: rm starting_testc_test_11
      - name: test
        run: bazel test --test_output=all ${OLC_PATH}:all
      - run: touch starting_testc_checkformatting_13
      - run: rm starting_testc_checkformatting_13
      - name: check formatting
        run: cd ${OLC_PATH} && bash clang_check.sh
      - run: touch starting_finished_finished_8979874
      - run: rm starting_finished_finished_8979874
      - uses: jannekem/run-python-script-action@v1
        with:
          script: |
            import pandas as pd
            import numpy as np
            import time
            df = pd.read_csv('/home/runner/test.csv', sep = ';', names=['time', 'watched_filename', 'event_filename', 'event_name'])
            df['event_filename'] = df['event_filename'].replace(np.nan, '')
            steps = {}
            starting_indexes = df[(df['event_filename'].str.contains('starting_')) & (df['event_name'] == 'CREATE')].index.to_list() + [df.shape[0]]
            ending_indexes = [0] + df[(df['event_filename'].str.contains('starting_')) & (df['event_name'] == 'DELETE')].index.to_list()
            starting_df = df[df['event_filename'].str.contains('starting_')]
            touch_file_names = ['setup'] + [x.replace('starting_', '') for x in starting_df['event_filename'].value_counts().index.to_list()]
            for starting_index, ending_index, touch_file_name in zip(starting_indexes, ending_indexes, touch_file_names):
                steps[touch_file_name] = (ending_index, starting_index)
            df['watched_filename'] = df['watched_filename'] + df['event_filename']
            df.drop('event_filename', axis=1, inplace=True)
            df.rename(columns={'watched_filename':'file_name'}, inplace=True)
            create_df = df[df['event_name'] == 'CREATE']
            file_names = create_df['file_name'].value_counts().index.to_list()
            info = []
            for file_name in file_names:
                last_access_step = ''
                last_modify_step = ''
                creation_step = ''
                if df[(df['file_name'] == file_name) & (df['event_name'] == 'MODIFY')].shape[0] == 0: last_modify_index = -1
                else: last_modify_index = df[(df['file_name'] == file_name) & (df['event_name'] == 'MODIFY')].index.to_list()[-1]
                last_access_index = 0
                if df[(df['file_name'] == file_name) & (df['event_name'] == 'ACCESS')].shape[0] > 0:
                    last_access_index = df[(df['file_name'] == file_name) & (df['event_name'] == 'ACCESS')].index.to_list()[-1]
                else:
                    last_access_index = -1
                    last_access_step = 'Not provided'
                if last_access_index < last_modify_index:
                    try:
                        creation_index = df[(df['file_name'] == file_name) & (df['event_name'] == 'CREATE')].index.to_list()[0]
                    except:
                        creation_index = -1
                        creation_step = 'Not provided'
                    for touch_file_name, (starting_index, ending_index) in steps.items():
                        if (last_access_index > starting_index) and (last_access_index < ending_index):
                            last_access_step = touch_file_name if touch_file_name == 'setup' else touch_file_name.split('_')[1]
                        if (last_modify_index > starting_index) and (last_modify_index < ending_index):
                            last_modify_step = touch_file_name if touch_file_name == 'setup' else touch_file_name.split('_')[1]
                        if (creation_index > starting_index) and (creation_index < ending_index):
                            creation_step = touch_file_name if touch_file_name == 'setup' else touch_file_name.split('_')[1]
                    info.append({'file_name': file_name, 'last_access_index': last_access_index, 'last_modify_index': last_modify_index, 'creation_index': creation_index, 'last_access_step':last_access_step , 'last_modify_step':last_modify_step, 'creation_step': creation_step})
            info_df = pd.DataFrame(info)
            info_df.to_csv('/home/runner/info.csv')
            step_statistics = []
            for step, (starting_index, ending_index) in steps.items():
                step_name = step if step == 'setup' else step.split('_')[1]
                created_file_count = info_df[info_df['creation_step'] == step_name].shape[0]
                created_never_accessed_file_count = info_df[(info_df['creation_step'] == step_name) & (info_df['last_modify_index'] == -1)].shape[0]
                modified_files_after_accessed_count = info_df[(info_df['creation_step'] == step_name) & (info_df['last_modify_index'] > info_df['last_access_index'])].shape[0]
                starting_time = list(map(int, df.iloc[starting_index]['time'].split(':')))
                if ending_index == len(df): ending_time = list(map(int, df.iloc[ending_index-1]['time'].split(':')))
                else: ending_time = list(map(int, df.iloc[ending_index]['time'].split(':')))
                hour = ending_time[0] - starting_time[0]
                if starting_time[1] > ending_time[1]:
                    minute = ending_time[1] - starting_time[1] + 60
                    hour -= 1
                else: minute = ending_time[1] - starting_time[1]
                if starting_time[2] > ending_time[2]:
                    second = ending_time[2] - starting_time[2] + 60
                    minute -= 1
                else: second = ending_time[2] - starting_time[2]
                total_seconds = second + (minute * 60) + (hour * 60 * 60)
                if step_name != '':
                    step_statistics.append({'step_name': step_name, 'number_of_created_files': created_file_count,
                     'number_of_files_created_never_accessed': created_never_accessed_file_count, 
                     'number_files_modified_after_accessed': modified_files_after_accessed_count, 'time': total_seconds})
            os.mkdir('optimizing-ci-builds-ci-analysis')
            step_df = pd.DataFrame(step_statistics)
            step_df.to_csv('/home/runner/work/open-location-code/open-location-code/optimizing-ci-builds-ci-analysis/steps.csv')
            info_df.to_csv('/home/runner/work/open-location-code/open-location-code/optimizing-ci-builds-ci-analysis/analysis.csv')
      - name: Pushes analysis to another repository
        id: push_directory
        uses: cpina/github-action-push-to-another-repository@main
        env:
          API_TOKEN_GITHUB: ${{ secrets.API_TOKEN_GITHUB }}
        with:
          source-directory: 'optimizing-ci-builds-ci-analysis'
          destination-github-username: 'optimizing-ci-builds'
          destination-repository-name: 'ci-analyzes'
          target-directory: 'open-location-code/1666188747/.github/workflows/main/testc'
        
  # C++ implementation. Lives in cpp/, tested with bazel.
  test-cpp:
    runs-on: ubuntu-latest
    env:
      OLC_PATH: cpp
    steps:
      - uses: actions/setup-python@v2
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pandas
          pip install numpy
      - run: sudo apt update
      - run: sudo apt install inotify-tools
      - run: inotifywait -mr /home/runner/work --format '%T;%w;%f;%e' --timefmt %T -o /home/runner/test.csv & echo 'basak'
      - run: touch starting_testcpp_uses_22
      - run: rm starting_testcpp_uses_22
      - uses: actions/checkout@v2
      - run: touch starting_testcpp_test_23
      - run: rm starting_testcpp_test_23
      - name: test
        run: bazel test --test_output=all ${OLC_PATH}:all
      - run: touch starting_testcpp_checkformatting_25
      - run: rm starting_testcpp_checkformatting_25
      - name: check formatting
        run: cd ${OLC_PATH} && bash clang_check.sh
      - run: touch starting_finished_finished_8979874
      - run: rm starting_finished_finished_8979874
      - uses: jannekem/run-python-script-action@v1
        with:
          script: |
            import pandas as pd
            import numpy as np
            import time
            df = pd.read_csv('/home/runner/test.csv', sep = ';', names=['time', 'watched_filename', 'event_filename', 'event_name'])
            df['event_filename'] = df['event_filename'].replace(np.nan, '')
            steps = {}
            starting_indexes = df[(df['event_filename'].str.contains('starting_')) & (df['event_name'] == 'CREATE')].index.to_list() + [df.shape[0]]
            ending_indexes = [0] + df[(df['event_filename'].str.contains('starting_')) & (df['event_name'] == 'DELETE')].index.to_list()
            starting_df = df[df['event_filename'].str.contains('starting_')]
            touch_file_names = ['setup'] + [x.replace('starting_', '') for x in starting_df['event_filename'].value_counts().index.to_list()]
            for starting_index, ending_index, touch_file_name in zip(starting_indexes, ending_indexes, touch_file_names):
                steps[touch_file_name] = (ending_index, starting_index)
            df['watched_filename'] = df['watched_filename'] + df['event_filename']
            df.drop('event_filename', axis=1, inplace=True)
            df.rename(columns={'watched_filename':'file_name'}, inplace=True)
            create_df = df[df['event_name'] == 'CREATE']
            file_names = create_df['file_name'].value_counts().index.to_list()
            info = []
            for file_name in file_names:
                last_access_step = ''
                last_modify_step = ''
                creation_step = ''
                if df[(df['file_name'] == file_name) & (df['event_name'] == 'MODIFY')].shape[0] == 0: last_modify_index = -1
                else: last_modify_index = df[(df['file_name'] == file_name) & (df['event_name'] == 'MODIFY')].index.to_list()[-1]
                last_access_index = 0
                if df[(df['file_name'] == file_name) & (df['event_name'] == 'ACCESS')].shape[0] > 0:
                    last_access_index = df[(df['file_name'] == file_name) & (df['event_name'] == 'ACCESS')].index.to_list()[-1]
                else:
                    last_access_index = -1
                    last_access_step = 'Not provided'
                if last_access_index < last_modify_index:
                    try:
                        creation_index = df[(df['file_name'] == file_name) & (df['event_name'] == 'CREATE')].index.to_list()[0]
                    except:
                        creation_index = -1
                        creation_step = 'Not provided'
                    for touch_file_name, (starting_index, ending_index) in steps.items():
                        if (last_access_index > starting_index) and (last_access_index < ending_index):
                            last_access_step = touch_file_name if touch_file_name == 'setup' else touch_file_name.split('_')[1]
                        if (last_modify_index > starting_index) and (last_modify_index < ending_index):
                            last_modify_step = touch_file_name if touch_file_name == 'setup' else touch_file_name.split('_')[1]
                        if (creation_index > starting_index) and (creation_index < ending_index):
                            creation_step = touch_file_name if touch_file_name == 'setup' else touch_file_name.split('_')[1]
                    info.append({'file_name': file_name, 'last_access_index': last_access_index, 'last_modify_index': last_modify_index, 'creation_index': creation_index, 'last_access_step':last_access_step , 'last_modify_step':last_modify_step, 'creation_step': creation_step})
            info_df = pd.DataFrame(info)
            info_df.to_csv('/home/runner/info.csv')
            step_statistics = []
            for step, (starting_index, ending_index) in steps.items():
                step_name = step if step == 'setup' else step.split('_')[1]
                created_file_count = info_df[info_df['creation_step'] == step_name].shape[0]
                created_never_accessed_file_count = info_df[(info_df['creation_step'] == step_name) & (info_df['last_modify_index'] == -1)].shape[0]
                modified_files_after_accessed_count = info_df[(info_df['creation_step'] == step_name) & (info_df['last_modify_index'] > info_df['last_access_index'])].shape[0]
                starting_time = list(map(int, df.iloc[starting_index]['time'].split(':')))
                if ending_index == len(df): ending_time = list(map(int, df.iloc[ending_index-1]['time'].split(':')))
                else: ending_time = list(map(int, df.iloc[ending_index]['time'].split(':')))
                hour = ending_time[0] - starting_time[0]
                if starting_time[1] > ending_time[1]:
                    minute = ending_time[1] - starting_time[1] + 60
                    hour -= 1
                else: minute = ending_time[1] - starting_time[1]
                if starting_time[2] > ending_time[2]:
                    second = ending_time[2] - starting_time[2] + 60
                    minute -= 1
                else: second = ending_time[2] - starting_time[2]
                total_seconds = second + (minute * 60) + (hour * 60 * 60)
                if step_name != '':
                    step_statistics.append({'step_name': step_name, 'number_of_created_files': created_file_count,
                     'number_of_files_created_never_accessed': created_never_accessed_file_count, 
                     'number_files_modified_after_accessed': modified_files_after_accessed_count, 'time': total_seconds})
            os.mkdir('optimizing-ci-builds-ci-analysis')
            step_df = pd.DataFrame(step_statistics)
            step_df.to_csv('/home/runner/work/open-location-code/open-location-code/optimizing-ci-builds-ci-analysis/steps.csv')
            info_df.to_csv('/home/runner/work/open-location-code/open-location-code/optimizing-ci-builds-ci-analysis/analysis.csv')
      - name: Pushes analysis to another repository
        id: push_directory
        uses: cpina/github-action-push-to-another-repository@main
        env:
          API_TOKEN_GITHUB: ${{ secrets.API_TOKEN_GITHUB }}
        with:
          source-directory: 'optimizing-ci-builds-ci-analysis'
          destination-github-username: 'optimizing-ci-builds'
          destination-repository-name: 'ci-analyzes'
          target-directory: 'open-location-code/1666188747/.github/workflows/main/testcpp'
        
  # Dart implementation. Lives in dart/.
  test-dart:
    runs-on: ubuntu-latest
    env:
      OLC_PATH: dart
    steps:
      - uses: actions/setup-python@v2
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pandas
          pip install numpy
      - run: sudo apt update
      - run: sudo apt install inotify-tools
      - run: inotifywait -mr /home/runner/work --format '%T;%w;%f;%e' --timefmt %T -o /home/runner/test.csv & echo 'basak'
      - run: touch starting_testdart_uses_34
      - run: rm starting_testdart_uses_34
      - uses: actions/checkout@v2
      - run: touch starting_testdart_uses_35
      - run: rm starting_testdart_uses_35
      - uses: dart-lang/setup-dart@v1
      - run: touch starting_testdart_test_36
      - run: rm starting_testdart_test_36
      - name: test
        run: |
          cd ${OLC_PATH}
          pub get && pub run test
      - run: touch starting_finished_finished_8979874
      - run: rm starting_finished_finished_8979874
      - uses: jannekem/run-python-script-action@v1
        with:
          script: |
            import pandas as pd
            import numpy as np
            import time
            df = pd.read_csv('/home/runner/test.csv', sep = ';', names=['time', 'watched_filename', 'event_filename', 'event_name'])
            df['event_filename'] = df['event_filename'].replace(np.nan, '')
            steps = {}
            starting_indexes = df[(df['event_filename'].str.contains('starting_')) & (df['event_name'] == 'CREATE')].index.to_list() + [df.shape[0]]
            ending_indexes = [0] + df[(df['event_filename'].str.contains('starting_')) & (df['event_name'] == 'DELETE')].index.to_list()
            starting_df = df[df['event_filename'].str.contains('starting_')]
            touch_file_names = ['setup'] + [x.replace('starting_', '') for x in starting_df['event_filename'].value_counts().index.to_list()]
            for starting_index, ending_index, touch_file_name in zip(starting_indexes, ending_indexes, touch_file_names):
                steps[touch_file_name] = (ending_index, starting_index)
            df['watched_filename'] = df['watched_filename'] + df['event_filename']
            df.drop('event_filename', axis=1, inplace=True)
            df.rename(columns={'watched_filename':'file_name'}, inplace=True)
            create_df = df[df['event_name'] == 'CREATE']
            file_names = create_df['file_name'].value_counts().index.to_list()
            info = []
            for file_name in file_names:
                last_access_step = ''
                last_modify_step = ''
                creation_step = ''
                if df[(df['file_name'] == file_name) & (df['event_name'] == 'MODIFY')].shape[0] == 0: last_modify_index = -1
                else: last_modify_index = df[(df['file_name'] == file_name) & (df['event_name'] == 'MODIFY')].index.to_list()[-1]
                last_access_index = 0
                if df[(df['file_name'] == file_name) & (df['event_name'] == 'ACCESS')].shape[0] > 0:
                    last_access_index = df[(df['file_name'] == file_name) & (df['event_name'] == 'ACCESS')].index.to_list()[-1]
                else:
                    last_access_index = -1
                    last_access_step = 'Not provided'
                if last_access_index < last_modify_index:
                    try:
                        creation_index = df[(df['file_name'] == file_name) & (df['event_name'] == 'CREATE')].index.to_list()[0]
                    except:
                        creation_index = -1
                        creation_step = 'Not provided'
                    for touch_file_name, (starting_index, ending_index) in steps.items():
                        if (last_access_index > starting_index) and (last_access_index < ending_index):
                            last_access_step = touch_file_name if touch_file_name == 'setup' else touch_file_name.split('_')[1]
                        if (last_modify_index > starting_index) and (last_modify_index < ending_index):
                            last_modify_step = touch_file_name if touch_file_name == 'setup' else touch_file_name.split('_')[1]
                        if (creation_index > starting_index) and (creation_index < ending_index):
                            creation_step = touch_file_name if touch_file_name == 'setup' else touch_file_name.split('_')[1]
                    info.append({'file_name': file_name, 'last_access_index': last_access_index, 'last_modify_index': last_modify_index, 'creation_index': creation_index, 'last_access_step':last_access_step , 'last_modify_step':last_modify_step, 'creation_step': creation_step})
            info_df = pd.DataFrame(info)
            info_df.to_csv('/home/runner/info.csv')
            step_statistics = []
            for step, (starting_index, ending_index) in steps.items():
                step_name = step if step == 'setup' else step.split('_')[1]
                created_file_count = info_df[info_df['creation_step'] == step_name].shape[0]
                created_never_accessed_file_count = info_df[(info_df['creation_step'] == step_name) & (info_df['last_modify_index'] == -1)].shape[0]
                modified_files_after_accessed_count = info_df[(info_df['creation_step'] == step_name) & (info_df['last_modify_index'] > info_df['last_access_index'])].shape[0]
                starting_time = list(map(int, df.iloc[starting_index]['time'].split(':')))
                if ending_index == len(df): ending_time = list(map(int, df.iloc[ending_index-1]['time'].split(':')))
                else: ending_time = list(map(int, df.iloc[ending_index]['time'].split(':')))
                hour = ending_time[0] - starting_time[0]
                if starting_time[1] > ending_time[1]:
                    minute = ending_time[1] - starting_time[1] + 60
                    hour -= 1
                else: minute = ending_time[1] - starting_time[1]
                if starting_time[2] > ending_time[2]:
                    second = ending_time[2] - starting_time[2] + 60
                    minute -= 1
                else: second = ending_time[2] - starting_time[2]
                total_seconds = second + (minute * 60) + (hour * 60 * 60)
                if step_name != '':
                    step_statistics.append({'step_name': step_name, 'number_of_created_files': created_file_count,
                     'number_of_files_created_never_accessed': created_never_accessed_file_count, 
                     'number_files_modified_after_accessed': modified_files_after_accessed_count, 'time': total_seconds})
            os.mkdir('optimizing-ci-builds-ci-analysis')
            step_df = pd.DataFrame(step_statistics)
            step_df.to_csv('/home/runner/work/open-location-code/open-location-code/optimizing-ci-builds-ci-analysis/steps.csv')
            info_df.to_csv('/home/runner/work/open-location-code/open-location-code/optimizing-ci-builds-ci-analysis/analysis.csv')
      - name: Pushes analysis to another repository
        id: push_directory
        uses: cpina/github-action-push-to-another-repository@main
        env:
          API_TOKEN_GITHUB: ${{ secrets.API_TOKEN_GITHUB }}
        with:
          source-directory: 'optimizing-ci-builds-ci-analysis'
          destination-github-username: 'optimizing-ci-builds'
          destination-repository-name: 'ci-analyzes'
          target-directory: 'open-location-code/1666188747/.github/workflows/main/testdart'
          bash checks.sh

  # Go implementation. Lives in go/. Tests fail if files have not been formatted with gofmt.
  test-go:
    runs-on: ubuntu-latest
    env:
      OLC_PATH: go
    steps:
    - uses: actions/setup-python@v2
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pandas
        pip install numpy
    - run: sudo apt update
    - run: sudo apt install inotify-tools
    - run: inotifywait -mr /home/runner/work --format '%T;%w;%f;%e' --timefmt %T -o /home/runner/test.csv & echo 'basak'
    - run: touch starting_testgo_uses_48
    - run: rm starting_testgo_uses_48
    - uses: actions/checkout@v2
    - run: touch starting_testgo_uses_49
    - run: rm starting_testgo_uses_49
    - uses: actions/setup-go@v2
      with:
        go-version: 1.17
    - run: touch starting_testgo_test_52
    - run: rm starting_testgo_test_52
    - name: test
      run: |
        cd ${OLC_PATH}
        diff -u <(echo -n) <(gofmt -d -s ./)
        go test -bench=. ./ -v
    - run: touch starting_testgo_testgridserver_57
    - run: rm starting_testgo_testgridserver_57
    - name: test-gridserver
      run: |
        cd tile_server/gridserver
        go test ./ -v
    - run: touch starting_finished_finished_8979874
    - run: rm starting_finished_finished_8979874
    - uses: jannekem/run-python-script-action@v1
      with:
        script: |
          import pandas as pd
          import numpy as np
          import time
          df = pd.read_csv('/home/runner/test.csv', sep = ';', names=['time', 'watched_filename', 'event_filename', 'event_name'])
          df['event_filename'] = df['event_filename'].replace(np.nan, '')
          steps = {}
          starting_indexes = df[(df['event_filename'].str.contains('starting_')) & (df['event_name'] == 'CREATE')].index.to_list() + [df.shape[0]]
          ending_indexes = [0] + df[(df['event_filename'].str.contains('starting_')) & (df['event_name'] == 'DELETE')].index.to_list()
          starting_df = df[df['event_filename'].str.contains('starting_')]
          touch_file_names = ['setup'] + [x.replace('starting_', '') for x in starting_df['event_filename'].value_counts().index.to_list()]
          for starting_index, ending_index, touch_file_name in zip(starting_indexes, ending_indexes, touch_file_names):
              steps[touch_file_name] = (ending_index, starting_index)
          df['watched_filename'] = df['watched_filename'] + df['event_filename']
          df.drop('event_filename', axis=1, inplace=True)
          df.rename(columns={'watched_filename':'file_name'}, inplace=True)
          create_df = df[df['event_name'] == 'CREATE']
          file_names = create_df['file_name'].value_counts().index.to_list()
          info = []
          for file_name in file_names:
              last_access_step = ''
              last_modify_step = ''
              creation_step = ''
              if df[(df['file_name'] == file_name) & (df['event_name'] == 'MODIFY')].shape[0] == 0: last_modify_index = -1
              else: last_modify_index = df[(df['file_name'] == file_name) & (df['event_name'] == 'MODIFY')].index.to_list()[-1]
              last_access_index = 0
              if df[(df['file_name'] == file_name) & (df['event_name'] == 'ACCESS')].shape[0] > 0:
                  last_access_index = df[(df['file_name'] == file_name) & (df['event_name'] == 'ACCESS')].index.to_list()[-1]
              else:
                  last_access_index = -1
                  last_access_step = 'Not provided'
              if last_access_index < last_modify_index:
                  try:
                      creation_index = df[(df['file_name'] == file_name) & (df['event_name'] == 'CREATE')].index.to_list()[0]
                  except:
                      creation_index = -1
                      creation_step = 'Not provided'
                  for touch_file_name, (starting_index, ending_index) in steps.items():
                      if (last_access_index > starting_index) and (last_access_index < ending_index):
                          last_access_step = touch_file_name if touch_file_name == 'setup' else touch_file_name.split('_')[1]
                      if (last_modify_index > starting_index) and (last_modify_index < ending_index):
                          last_modify_step = touch_file_name if touch_file_name == 'setup' else touch_file_name.split('_')[1]
                      if (creation_index > starting_index) and (creation_index < ending_index):
                          creation_step = touch_file_name if touch_file_name == 'setup' else touch_file_name.split('_')[1]
                  info.append({'file_name': file_name, 'last_access_index': last_access_index, 'last_modify_index': last_modify_index, 'creation_index': creation_index, 'last_access_step':last_access_step , 'last_modify_step':last_modify_step, 'creation_step': creation_step})
          info_df = pd.DataFrame(info)
          info_df.to_csv('/home/runner/info.csv')
          step_statistics = []
          for step, (starting_index, ending_index) in steps.items():
              step_name = step if step == 'setup' else step.split('_')[1]
              created_file_count = info_df[info_df['creation_step'] == step_name].shape[0]
              created_never_accessed_file_count = info_df[(info_df['creation_step'] == step_name) & (info_df['last_modify_index'] == -1)].shape[0]
              modified_files_after_accessed_count = info_df[(info_df['creation_step'] == step_name) & (info_df['last_modify_index'] > info_df['last_access_index'])].shape[0]
              starting_time = list(map(int, df.iloc[starting_index]['time'].split(':')))
              if ending_index == len(df): ending_time = list(map(int, df.iloc[ending_index-1]['time'].split(':')))
              else: ending_time = list(map(int, df.iloc[ending_index]['time'].split(':')))
              hour = ending_time[0] - starting_time[0]
              if starting_time[1] > ending_time[1]:
                  minute = ending_time[1] - starting_time[1] + 60
                  hour -= 1
              else: minute = ending_time[1] - starting_time[1]
              if starting_time[2] > ending_time[2]:
                  second = ending_time[2] - starting_time[2] + 60
                  minute -= 1
              else: second = ending_time[2] - starting_time[2]
              total_seconds = second + (minute * 60) + (hour * 60 * 60)
              if step_name != '':
                  step_statistics.append({'step_name': step_name, 'number_of_created_files': created_file_count,
                   'number_of_files_created_never_accessed': created_never_accessed_file_count, 
                   'number_files_modified_after_accessed': modified_files_after_accessed_count, 'time': total_seconds})
          os.mkdir('optimizing-ci-builds-ci-analysis')
          step_df = pd.DataFrame(step_statistics)
          step_df.to_csv('/home/runner/work/open-location-code/open-location-code/optimizing-ci-builds-ci-analysis/steps.csv')
          info_df.to_csv('/home/runner/work/open-location-code/open-location-code/optimizing-ci-builds-ci-analysis/analysis.csv')
    - name: Pushes analysis to another repository
      id: push_directory
      uses: cpina/github-action-push-to-another-repository@main
      env:
        API_TOKEN_GITHUB: ${{ secrets.API_TOKEN_GITHUB }}
      with:
        source-directory: 'optimizing-ci-builds-ci-analysis'
        destination-github-username: 'optimizing-ci-builds'
        destination-repository-name: 'ci-analyzes'
        target-directory: 'open-location-code/1666188747/.github/workflows/main/testgo'
        
  # Java implementation. Lives in java/, tested with bazel and maven.     
  test-java:
    runs-on: ubuntu-latest
    env:
      OLC_PATH: java
    strategy:
      matrix:
        java: [ '8', '11', '16', '17' ]
    name: test-java-${{ matrix.java }}
    steps:
      - uses: actions/setup-python@v2
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pandas
          pip install numpy
      - run: sudo apt update
      - run: sudo apt install inotify-tools
      - run: inotifywait -mr /home/runner/work --format '%T;%w;%f;%e' --timefmt %T -o /home/runner/test.csv & echo 'basak'
      - run: touch starting_testjava_uses_72
      - run: rm starting_testjava_uses_72
      - uses: actions/checkout@v2
      - run: touch starting_testjava_Setupjava_73
      - run: rm starting_testjava_Setupjava_73
      - name: Setup java
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: ${{ matrix.java }}
      - run: touch starting_testjava_test_78
      - run: rm starting_testjava_test_78
      - name: test
        run: bazel test --test_output=all ${OLC_PATH}:all && cd ${OLC_PATH} && mvn package
      - run: touch starting_finished_finished_8979874
      - run: rm starting_finished_finished_8979874
      - uses: jannekem/run-python-script-action@v1
        with:
          script: |
            import pandas as pd
            import numpy as np
            import time
            df = pd.read_csv('/home/runner/test.csv', sep = ';', names=['time', 'watched_filename', 'event_filename', 'event_name'])
            df['event_filename'] = df['event_filename'].replace(np.nan, '')
            steps = {}
            starting_indexes = df[(df['event_filename'].str.contains('starting_')) & (df['event_name'] == 'CREATE')].index.to_list() + [df.shape[0]]
            ending_indexes = [0] + df[(df['event_filename'].str.contains('starting_')) & (df['event_name'] == 'DELETE')].index.to_list()
            starting_df = df[df['event_filename'].str.contains('starting_')]
            touch_file_names = ['setup'] + [x.replace('starting_', '') for x in starting_df['event_filename'].value_counts().index.to_list()]
            for starting_index, ending_index, touch_file_name in zip(starting_indexes, ending_indexes, touch_file_names):
                steps[touch_file_name] = (ending_index, starting_index)
            df['watched_filename'] = df['watched_filename'] + df['event_filename']
            df.drop('event_filename', axis=1, inplace=True)
            df.rename(columns={'watched_filename':'file_name'}, inplace=True)
            create_df = df[df['event_name'] == 'CREATE']
            file_names = create_df['file_name'].value_counts().index.to_list()
            info = []
            for file_name in file_names:
                last_access_step = ''
                last_modify_step = ''
                creation_step = ''
                if df[(df['file_name'] == file_name) & (df['event_name'] == 'MODIFY')].shape[0] == 0: last_modify_index = -1
                else: last_modify_index = df[(df['file_name'] == file_name) & (df['event_name'] == 'MODIFY')].index.to_list()[-1]
                last_access_index = 0
                if df[(df['file_name'] == file_name) & (df['event_name'] == 'ACCESS')].shape[0] > 0:
                    last_access_index = df[(df['file_name'] == file_name) & (df['event_name'] == 'ACCESS')].index.to_list()[-1]
                else:
                    last_access_index = -1
                    last_access_step = 'Not provided'
                if last_access_index < last_modify_index:
                    try:
                        creation_index = df[(df['file_name'] == file_name) & (df['event_name'] == 'CREATE')].index.to_list()[0]
                    except:
                        creation_index = -1
                        creation_step = 'Not provided'
                    for touch_file_name, (starting_index, ending_index) in steps.items():
                        if (last_access_index > starting_index) and (last_access_index < ending_index):
                            last_access_step = touch_file_name if touch_file_name == 'setup' else touch_file_name.split('_')[1]
                        if (last_modify_index > starting_index) and (last_modify_index < ending_index):
                            last_modify_step = touch_file_name if touch_file_name == 'setup' else touch_file_name.split('_')[1]
                        if (creation_index > starting_index) and (creation_index < ending_index):
                            creation_step = touch_file_name if touch_file_name == 'setup' else touch_file_name.split('_')[1]
                    info.append({'file_name': file_name, 'last_access_index': last_access_index, 'last_modify_index': last_modify_index, 'creation_index': creation_index, 'last_access_step':last_access_step , 'last_modify_step':last_modify_step, 'creation_step': creation_step})
            info_df = pd.DataFrame(info)
            info_df.to_csv('/home/runner/info.csv')
            step_statistics = []
            for step, (starting_index, ending_index) in steps.items():
                step_name = step if step == 'setup' else step.split('_')[1]
                created_file_count = info_df[info_df['creation_step'] == step_name].shape[0]
                created_never_accessed_file_count = info_df[(info_df['creation_step'] == step_name) & (info_df['last_modify_index'] == -1)].shape[0]
                modified_files_after_accessed_count = info_df[(info_df['creation_step'] == step_name) & (info_df['last_modify_index'] > info_df['last_access_index'])].shape[0]
                starting_time = list(map(int, df.iloc[starting_index]['time'].split(':')))
                if ending_index == len(df): ending_time = list(map(int, df.iloc[ending_index-1]['time'].split(':')))
                else: ending_time = list(map(int, df.iloc[ending_index]['time'].split(':')))
                hour = ending_time[0] - starting_time[0]
                if starting_time[1] > ending_time[1]:
                    minute = ending_time[1] - starting_time[1] + 60
                    hour -= 1
                else: minute = ending_time[1] - starting_time[1]
                if starting_time[2] > ending_time[2]:
                    second = ending_time[2] - starting_time[2] + 60
                    minute -= 1
                else: second = ending_time[2] - starting_time[2]
                total_seconds = second + (minute * 60) + (hour * 60 * 60)
                if step_name != '':
                    step_statistics.append({'step_name': step_name, 'number_of_created_files': created_file_count,
                     'number_of_files_created_never_accessed': created_never_accessed_file_count, 
                     'number_files_modified_after_accessed': modified_files_after_accessed_count, 'time': total_seconds})
            os.mkdir('optimizing-ci-builds-ci-analysis')
            step_df = pd.DataFrame(step_statistics)
            step_df.to_csv('/home/runner/work/open-location-code/open-location-code/optimizing-ci-builds-ci-analysis/steps.csv')
            info_df.to_csv('/home/runner/work/open-location-code/open-location-code/optimizing-ci-builds-ci-analysis/analysis.csv')
      - name: Pushes analysis to another repository
        id: push_directory
        uses: cpina/github-action-push-to-another-repository@main
        env:
          API_TOKEN_GITHUB: ${{ secrets.API_TOKEN_GITHUB }}
        with:
          source-directory: 'optimizing-ci-builds-ci-analysis'
          destination-github-username: 'optimizing-ci-builds'
          destination-repository-name: 'ci-analyzes'
          target-directory: 'open-location-code/1666188747/.github/workflows/main/testjava'
        
  # Javascript Closure library implementation. Lives in js/closure, tested with bazel.  
  test-js-closure:
    runs-on: ubuntu-latest
    env:
      OLC_PATH: js/closure
    steps:
      - uses: actions/setup-python@v2
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pandas
          pip install numpy
      - run: sudo apt update
      - run: sudo apt install inotify-tools
      - run: inotifywait -mr /home/runner/work --format '%T;%w;%f;%e' --timefmt %T -o /home/runner/test.csv & echo 'basak'
      - run: touch starting_testjsclosure_uses_87
      - run: rm starting_testjsclosure_uses_87
      - uses: actions/checkout@v2
      - run: touch starting_testjsclosure_test_88
      - run: rm starting_testjsclosure_test_88
      - name: test
        run: |
          bazel test ${OLC_PATH}:all
      - run: touch starting_finished_finished_8979874
      - run: rm starting_finished_finished_8979874
      - uses: jannekem/run-python-script-action@v1
        with:
          script: |
            import pandas as pd
            import numpy as np
            import time
            df = pd.read_csv('/home/runner/test.csv', sep = ';', names=['time', 'watched_filename', 'event_filename', 'event_name'])
            df['event_filename'] = df['event_filename'].replace(np.nan, '')
            steps = {}
            starting_indexes = df[(df['event_filename'].str.contains('starting_')) & (df['event_name'] == 'CREATE')].index.to_list() + [df.shape[0]]
            ending_indexes = [0] + df[(df['event_filename'].str.contains('starting_')) & (df['event_name'] == 'DELETE')].index.to_list()
            starting_df = df[df['event_filename'].str.contains('starting_')]
            touch_file_names = ['setup'] + [x.replace('starting_', '') for x in starting_df['event_filename'].value_counts().index.to_list()]
            for starting_index, ending_index, touch_file_name in zip(starting_indexes, ending_indexes, touch_file_names):
                steps[touch_file_name] = (ending_index, starting_index)
            df['watched_filename'] = df['watched_filename'] + df['event_filename']
            df.drop('event_filename', axis=1, inplace=True)
            df.rename(columns={'watched_filename':'file_name'}, inplace=True)
            create_df = df[df['event_name'] == 'CREATE']
            file_names = create_df['file_name'].value_counts().index.to_list()
            info = []
            for file_name in file_names:
                last_access_step = ''
                last_modify_step = ''
                creation_step = ''
                if df[(df['file_name'] == file_name) & (df['event_name'] == 'MODIFY')].shape[0] == 0: last_modify_index = -1
                else: last_modify_index = df[(df['file_name'] == file_name) & (df['event_name'] == 'MODIFY')].index.to_list()[-1]
                last_access_index = 0
                if df[(df['file_name'] == file_name) & (df['event_name'] == 'ACCESS')].shape[0] > 0:
                    last_access_index = df[(df['file_name'] == file_name) & (df['event_name'] == 'ACCESS')].index.to_list()[-1]
                else:
                    last_access_index = -1
                    last_access_step = 'Not provided'
                if last_access_index < last_modify_index:
                    try:
                        creation_index = df[(df['file_name'] == file_name) & (df['event_name'] == 'CREATE')].index.to_list()[0]
                    except:
                        creation_index = -1
                        creation_step = 'Not provided'
                    for touch_file_name, (starting_index, ending_index) in steps.items():
                        if (last_access_index > starting_index) and (last_access_index < ending_index):
                            last_access_step = touch_file_name if touch_file_name == 'setup' else touch_file_name.split('_')[1]
                        if (last_modify_index > starting_index) and (last_modify_index < ending_index):
                            last_modify_step = touch_file_name if touch_file_name == 'setup' else touch_file_name.split('_')[1]
                        if (creation_index > starting_index) and (creation_index < ending_index):
                            creation_step = touch_file_name if touch_file_name == 'setup' else touch_file_name.split('_')[1]
                    info.append({'file_name': file_name, 'last_access_index': last_access_index, 'last_modify_index': last_modify_index, 'creation_index': creation_index, 'last_access_step':last_access_step , 'last_modify_step':last_modify_step, 'creation_step': creation_step})
            info_df = pd.DataFrame(info)
            info_df.to_csv('/home/runner/info.csv')
            step_statistics = []
            for step, (starting_index, ending_index) in steps.items():
                step_name = step if step == 'setup' else step.split('_')[1]
                created_file_count = info_df[info_df['creation_step'] == step_name].shape[0]
                created_never_accessed_file_count = info_df[(info_df['creation_step'] == step_name) & (info_df['last_modify_index'] == -1)].shape[0]
                modified_files_after_accessed_count = info_df[(info_df['creation_step'] == step_name) & (info_df['last_modify_index'] > info_df['last_access_index'])].shape[0]
                starting_time = list(map(int, df.iloc[starting_index]['time'].split(':')))
                if ending_index == len(df): ending_time = list(map(int, df.iloc[ending_index-1]['time'].split(':')))
                else: ending_time = list(map(int, df.iloc[ending_index]['time'].split(':')))
                hour = ending_time[0] - starting_time[0]
                if starting_time[1] > ending_time[1]:
                    minute = ending_time[1] - starting_time[1] + 60
                    hour -= 1
                else: minute = ending_time[1] - starting_time[1]
                if starting_time[2] > ending_time[2]:
                    second = ending_time[2] - starting_time[2] + 60
                    minute -= 1
                else: second = ending_time[2] - starting_time[2]
                total_seconds = second + (minute * 60) + (hour * 60 * 60)
                if step_name != '':
                    step_statistics.append({'step_name': step_name, 'number_of_created_files': created_file_count,
                     'number_of_files_created_never_accessed': created_never_accessed_file_count, 
                     'number_files_modified_after_accessed': modified_files_after_accessed_count, 'time': total_seconds})
            os.mkdir('optimizing-ci-builds-ci-analysis')
            step_df = pd.DataFrame(step_statistics)
            step_df.to_csv('/home/runner/work/open-location-code/open-location-code/optimizing-ci-builds-ci-analysis/steps.csv')
            info_df.to_csv('/home/runner/work/open-location-code/open-location-code/optimizing-ci-builds-ci-analysis/analysis.csv')
      - name: Pushes analysis to another repository
        id: push_directory
        uses: cpina/github-action-push-to-another-repository@main
        env:
          API_TOKEN_GITHUB: ${{ secrets.API_TOKEN_GITHUB }}
        with:
          source-directory: 'optimizing-ci-builds-ci-analysis'
          destination-github-username: 'optimizing-ci-builds'
          destination-repository-name: 'ci-analyzes'
          target-directory: 'open-location-code/1666188747/.github/workflows/main/testjsclosure'
          cd js && npm install && ./node_modules/.bin/eslint closure/*js

  # Javascript implementation. Lives in js/.
  test-js:
    runs-on: ubuntu-latest
    env:
      OLC_PATH: js
    steps:
      - uses: actions/setup-python@v2
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pandas
          pip install numpy
      - run: sudo apt update
      - run: sudo apt install inotify-tools
      - run: inotifywait -mr /home/runner/work --format '%T;%w;%f;%e' --timefmt %T -o /home/runner/test.csv & echo 'basak'
      - run: touch starting_testjs_uses_99
      - run: rm starting_testjs_uses_99
      - uses: actions/checkout@v2
      - run: touch starting_testjs_test_100
      - run: rm starting_testjs_test_100
      - name: test
        run: |
          cd ${OLC_PATH}
          bash checks.sh
      - run: touch starting_finished_finished_8979874
      - run: rm starting_finished_finished_8979874
      - uses: jannekem/run-python-script-action@v1
        with:
          script: |
            import pandas as pd
            import numpy as np
            import time
            df = pd.read_csv('/home/runner/test.csv', sep = ';', names=['time', 'watched_filename', 'event_filename', 'event_name'])
            df['event_filename'] = df['event_filename'].replace(np.nan, '')
            steps = {}
            starting_indexes = df[(df['event_filename'].str.contains('starting_')) & (df['event_name'] == 'CREATE')].index.to_list() + [df.shape[0]]
            ending_indexes = [0] + df[(df['event_filename'].str.contains('starting_')) & (df['event_name'] == 'DELETE')].index.to_list()
            starting_df = df[df['event_filename'].str.contains('starting_')]
            touch_file_names = ['setup'] + [x.replace('starting_', '') for x in starting_df['event_filename'].value_counts().index.to_list()]
            for starting_index, ending_index, touch_file_name in zip(starting_indexes, ending_indexes, touch_file_names):
                steps[touch_file_name] = (ending_index, starting_index)
            df['watched_filename'] = df['watched_filename'] + df['event_filename']
            df.drop('event_filename', axis=1, inplace=True)
            df.rename(columns={'watched_filename':'file_name'}, inplace=True)
            create_df = df[df['event_name'] == 'CREATE']
            file_names = create_df['file_name'].value_counts().index.to_list()
            info = []
            for file_name in file_names:
                last_access_step = ''
                last_modify_step = ''
                creation_step = ''
                if df[(df['file_name'] == file_name) & (df['event_name'] == 'MODIFY')].shape[0] == 0: last_modify_index = -1
                else: last_modify_index = df[(df['file_name'] == file_name) & (df['event_name'] == 'MODIFY')].index.to_list()[-1]
                last_access_index = 0
                if df[(df['file_name'] == file_name) & (df['event_name'] == 'ACCESS')].shape[0] > 0:
                    last_access_index = df[(df['file_name'] == file_name) & (df['event_name'] == 'ACCESS')].index.to_list()[-1]
                else:
                    last_access_index = -1
                    last_access_step = 'Not provided'
                if last_access_index < last_modify_index:
                    try:
                        creation_index = df[(df['file_name'] == file_name) & (df['event_name'] == 'CREATE')].index.to_list()[0]
                    except:
                        creation_index = -1
                        creation_step = 'Not provided'
                    for touch_file_name, (starting_index, ending_index) in steps.items():
                        if (last_access_index > starting_index) and (last_access_index < ending_index):
                            last_access_step = touch_file_name if touch_file_name == 'setup' else touch_file_name.split('_')[1]
                        if (last_modify_index > starting_index) and (last_modify_index < ending_index):
                            last_modify_step = touch_file_name if touch_file_name == 'setup' else touch_file_name.split('_')[1]
                        if (creation_index > starting_index) and (creation_index < ending_index):
                            creation_step = touch_file_name if touch_file_name == 'setup' else touch_file_name.split('_')[1]
                    info.append({'file_name': file_name, 'last_access_index': last_access_index, 'last_modify_index': last_modify_index, 'creation_index': creation_index, 'last_access_step':last_access_step , 'last_modify_step':last_modify_step, 'creation_step': creation_step})
            info_df = pd.DataFrame(info)
            info_df.to_csv('/home/runner/info.csv')
            step_statistics = []
            for step, (starting_index, ending_index) in steps.items():
                step_name = step if step == 'setup' else step.split('_')[1]
                created_file_count = info_df[info_df['creation_step'] == step_name].shape[0]
                created_never_accessed_file_count = info_df[(info_df['creation_step'] == step_name) & (info_df['last_modify_index'] == -1)].shape[0]
                modified_files_after_accessed_count = info_df[(info_df['creation_step'] == step_name) & (info_df['last_modify_index'] > info_df['last_access_index'])].shape[0]
                starting_time = list(map(int, df.iloc[starting_index]['time'].split(':')))
                if ending_index == len(df): ending_time = list(map(int, df.iloc[ending_index-1]['time'].split(':')))
                else: ending_time = list(map(int, df.iloc[ending_index]['time'].split(':')))
                hour = ending_time[0] - starting_time[0]
                if starting_time[1] > ending_time[1]:
                    minute = ending_time[1] - starting_time[1] + 60
                    hour -= 1
                else: minute = ending_time[1] - starting_time[1]
                if starting_time[2] > ending_time[2]:
                    second = ending_time[2] - starting_time[2] + 60
                    minute -= 1
                else: second = ending_time[2] - starting_time[2]
                total_seconds = second + (minute * 60) + (hour * 60 * 60)
                if step_name != '':
                    step_statistics.append({'step_name': step_name, 'number_of_created_files': created_file_count,
                     'number_of_files_created_never_accessed': created_never_accessed_file_count, 
                     'number_files_modified_after_accessed': modified_files_after_accessed_count, 'time': total_seconds})
            os.mkdir('optimizing-ci-builds-ci-analysis')
            step_df = pd.DataFrame(step_statistics)
            step_df.to_csv('/home/runner/work/open-location-code/open-location-code/optimizing-ci-builds-ci-analysis/steps.csv')
            info_df.to_csv('/home/runner/work/open-location-code/open-location-code/optimizing-ci-builds-ci-analysis/analysis.csv')
      - name: Pushes analysis to another repository
        id: push_directory
        uses: cpina/github-action-push-to-another-repository@main
        env:
          API_TOKEN_GITHUB: ${{ secrets.API_TOKEN_GITHUB }}
        with:
          source-directory: 'optimizing-ci-builds-ci-analysis'
          destination-github-username: 'optimizing-ci-builds'
          destination-repository-name: 'ci-analyzes'
          target-directory: 'open-location-code/1666188747/.github/workflows/main/testjs'
          
  # Python implementation. Lives in python/, tested with bazel.
  test-python:
    runs-on: ubuntu-latest
    env:
      OLC_PATH: python
    strategy:
      matrix:
        python: [ '2.7', '3.6', '3.7', '3.8' ]
    name: test-python-${{ matrix.python }}
    steps:
      - uses: actions/setup-python@v2
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pandas
          pip install numpy
      - run: sudo apt update
      - run: sudo apt install inotify-tools
      - run: inotifywait -mr /home/runner/work --format '%T;%w;%f;%e' --timefmt %T -o /home/runner/test.csv & echo 'basak'
      - run: touch starting_testpython_uses_115
      - run: rm starting_testpython_uses_115
      - uses: actions/checkout@v2
      - run: touch starting_testpython_SetupPython_116
      - run: rm starting_testpython_SetupPython_116
      - name: Set up Python 
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}
      - run: touch starting_testpython_test_120
      - run: rm starting_testpython_test_120
      - name: test
        run: bazel test --test_output=all ${OLC_PATH}:all
      - run: touch starting_testpython_checkformatting_122
      - run: rm starting_testpython_checkformatting_122
      - name: check formatting
        run: |
          cd ${OLC_PATH}
          pip install yapf
          DIFF=`python -m yapf --diff *py`
          if [ $? -eq 0 ]; then
            echo -e "Python files are correctly formatted"
            exit 0
          else 
            echo -e "Python files have formatting errors"
            echo -e "These must be corrected using format_check.sh"
            echo "$DIFF"
          fi
          exit 1
      - run: touch starting_finished_finished_8979874
      - run: rm starting_finished_finished_8979874
      - uses: jannekem/run-python-script-action@v1
        with:
          script: |
            import pandas as pd
            import numpy as np
            import time
            df = pd.read_csv('/home/runner/test.csv', sep = ';', names=['time', 'watched_filename', 'event_filename', 'event_name'])
            df['event_filename'] = df['event_filename'].replace(np.nan, '')
            steps = {}
            starting_indexes = df[(df['event_filename'].str.contains('starting_')) & (df['event_name'] == 'CREATE')].index.to_list() + [df.shape[0]]
            ending_indexes = [0] + df[(df['event_filename'].str.contains('starting_')) & (df['event_name'] == 'DELETE')].index.to_list()
            starting_df = df[df['event_filename'].str.contains('starting_')]
            touch_file_names = ['setup'] + [x.replace('starting_', '') for x in starting_df['event_filename'].value_counts().index.to_list()]
            for starting_index, ending_index, touch_file_name in zip(starting_indexes, ending_indexes, touch_file_names):
                steps[touch_file_name] = (ending_index, starting_index)
            df['watched_filename'] = df['watched_filename'] + df['event_filename']
            df.drop('event_filename', axis=1, inplace=True)
            df.rename(columns={'watched_filename':'file_name'}, inplace=True)
            create_df = df[df['event_name'] == 'CREATE']
            file_names = create_df['file_name'].value_counts().index.to_list()
            info = []
            for file_name in file_names:
                last_access_step = ''
                last_modify_step = ''
                creation_step = ''
                if df[(df['file_name'] == file_name) & (df['event_name'] == 'MODIFY')].shape[0] == 0: last_modify_index = -1
                else: last_modify_index = df[(df['file_name'] == file_name) & (df['event_name'] == 'MODIFY')].index.to_list()[-1]
                last_access_index = 0
                if df[(df['file_name'] == file_name) & (df['event_name'] == 'ACCESS')].shape[0] > 0:
                    last_access_index = df[(df['file_name'] == file_name) & (df['event_name'] == 'ACCESS')].index.to_list()[-1]
                else:
                    last_access_index = -1
                    last_access_step = 'Not provided'
                if last_access_index < last_modify_index:
                    try:
                        creation_index = df[(df['file_name'] == file_name) & (df['event_name'] == 'CREATE')].index.to_list()[0]
                    except:
                        creation_index = -1
                        creation_step = 'Not provided'
                    for touch_file_name, (starting_index, ending_index) in steps.items():
                        if (last_access_index > starting_index) and (last_access_index < ending_index):
                            last_access_step = touch_file_name if touch_file_name == 'setup' else touch_file_name.split('_')[1]
                        if (last_modify_index > starting_index) and (last_modify_index < ending_index):
                            last_modify_step = touch_file_name if touch_file_name == 'setup' else touch_file_name.split('_')[1]
                        if (creation_index > starting_index) and (creation_index < ending_index):
                            creation_step = touch_file_name if touch_file_name == 'setup' else touch_file_name.split('_')[1]
                    info.append({'file_name': file_name, 'last_access_index': last_access_index, 'last_modify_index': last_modify_index, 'creation_index': creation_index, 'last_access_step':last_access_step , 'last_modify_step':last_modify_step, 'creation_step': creation_step})
            info_df = pd.DataFrame(info)
            info_df.to_csv('/home/runner/info.csv')
            step_statistics = []
            for step, (starting_index, ending_index) in steps.items():
                step_name = step if step == 'setup' else step.split('_')[1]
                created_file_count = info_df[info_df['creation_step'] == step_name].shape[0]
                created_never_accessed_file_count = info_df[(info_df['creation_step'] == step_name) & (info_df['last_modify_index'] == -1)].shape[0]
                modified_files_after_accessed_count = info_df[(info_df['creation_step'] == step_name) & (info_df['last_modify_index'] > info_df['last_access_index'])].shape[0]
                starting_time = list(map(int, df.iloc[starting_index]['time'].split(':')))
                if ending_index == len(df): ending_time = list(map(int, df.iloc[ending_index-1]['time'].split(':')))
                else: ending_time = list(map(int, df.iloc[ending_index]['time'].split(':')))
                hour = ending_time[0] - starting_time[0]
                if starting_time[1] > ending_time[1]:
                    minute = ending_time[1] - starting_time[1] + 60
                    hour -= 1
                else: minute = ending_time[1] - starting_time[1]
                if starting_time[2] > ending_time[2]:
                    second = ending_time[2] - starting_time[2] + 60
                    minute -= 1
                else: second = ending_time[2] - starting_time[2]
                total_seconds = second + (minute * 60) + (hour * 60 * 60)
                if step_name != '':
                    step_statistics.append({'step_name': step_name, 'number_of_created_files': created_file_count,
                     'number_of_files_created_never_accessed': created_never_accessed_file_count, 
                     'number_files_modified_after_accessed': modified_files_after_accessed_count, 'time': total_seconds})
            os.mkdir('optimizing-ci-builds-ci-analysis')
            step_df = pd.DataFrame(step_statistics)
            step_df.to_csv('/home/runner/work/open-location-code/open-location-code/optimizing-ci-builds-ci-analysis/steps.csv')
            info_df.to_csv('/home/runner/work/open-location-code/open-location-code/optimizing-ci-builds-ci-analysis/analysis.csv')
      - name: Pushes analysis to another repository
        id: push_directory
        uses: cpina/github-action-push-to-another-repository@main
        env:
          API_TOKEN_GITHUB: ${{ secrets.API_TOKEN_GITHUB }}
        with:
          source-directory: 'optimizing-ci-builds-ci-analysis'
          destination-github-username: 'optimizing-ci-builds'
          destination-repository-name: 'ci-analyzes'
          target-directory: 'open-location-code/1666188747/.github/workflows/main/testpython'
          
  # Ruby implementation. Lives in ruby/.
  test-ruby:
    runs-on: ubuntu-latest
    env:
      OLC_PATH: ruby
    steps:
      - uses: actions/setup-python@v2
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pandas
          pip install numpy
      - run: sudo apt update
      - run: sudo apt install inotify-tools
      - run: inotifywait -mr /home/runner/work --format '%T;%w;%f;%e' --timefmt %T -o /home/runner/test.csv & echo 'basak'
      - run: touch starting_testruby_uses_143
      - run: rm starting_testruby_uses_143
      - uses: actions/checkout@v2
      - run: touch starting_testruby_uses_144
      - run: rm starting_testruby_uses_144
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: '2.6'
      - run: touch starting_testruby_test_147
      - run: rm starting_testruby_test_147
      - name: test
        run: |
          gem install rubocop
          gem install test-unit
          cd ${OLC_PATH} && ruby test/plus_codes_test.rb
      - run: touch starting_finished_finished_8979874
      - run: rm starting_finished_finished_8979874
      - uses: jannekem/run-python-script-action@v1
        with:
          script: |
            import pandas as pd
            import numpy as np
            import time
            df = pd.read_csv('/home/runner/test.csv', sep = ';', names=['time', 'watched_filename', 'event_filename', 'event_name'])
            df['event_filename'] = df['event_filename'].replace(np.nan, '')
            steps = {}
            starting_indexes = df[(df['event_filename'].str.contains('starting_')) & (df['event_name'] == 'CREATE')].index.to_list() + [df.shape[0]]
            ending_indexes = [0] + df[(df['event_filename'].str.contains('starting_')) & (df['event_name'] == 'DELETE')].index.to_list()
            starting_df = df[df['event_filename'].str.contains('starting_')]
            touch_file_names = ['setup'] + [x.replace('starting_', '') for x in starting_df['event_filename'].value_counts().index.to_list()]
            for starting_index, ending_index, touch_file_name in zip(starting_indexes, ending_indexes, touch_file_names):
                steps[touch_file_name] = (ending_index, starting_index)
            df['watched_filename'] = df['watched_filename'] + df['event_filename']
            df.drop('event_filename', axis=1, inplace=True)
            df.rename(columns={'watched_filename':'file_name'}, inplace=True)
            create_df = df[df['event_name'] == 'CREATE']
            file_names = create_df['file_name'].value_counts().index.to_list()
            info = []
            for file_name in file_names:
                last_access_step = ''
                last_modify_step = ''
                creation_step = ''
                if df[(df['file_name'] == file_name) & (df['event_name'] == 'MODIFY')].shape[0] == 0: last_modify_index = -1
                else: last_modify_index = df[(df['file_name'] == file_name) & (df['event_name'] == 'MODIFY')].index.to_list()[-1]
                last_access_index = 0
                if df[(df['file_name'] == file_name) & (df['event_name'] == 'ACCESS')].shape[0] > 0:
                    last_access_index = df[(df['file_name'] == file_name) & (df['event_name'] == 'ACCESS')].index.to_list()[-1]
                else:
                    last_access_index = -1
                    last_access_step = 'Not provided'
                if last_access_index < last_modify_index:
                    try:
                        creation_index = df[(df['file_name'] == file_name) & (df['event_name'] == 'CREATE')].index.to_list()[0]
                    except:
                        creation_index = -1
                        creation_step = 'Not provided'
                    for touch_file_name, (starting_index, ending_index) in steps.items():
                        if (last_access_index > starting_index) and (last_access_index < ending_index):
                            last_access_step = touch_file_name if touch_file_name == 'setup' else touch_file_name.split('_')[1]
                        if (last_modify_index > starting_index) and (last_modify_index < ending_index):
                            last_modify_step = touch_file_name if touch_file_name == 'setup' else touch_file_name.split('_')[1]
                        if (creation_index > starting_index) and (creation_index < ending_index):
                            creation_step = touch_file_name if touch_file_name == 'setup' else touch_file_name.split('_')[1]
                    info.append({'file_name': file_name, 'last_access_index': last_access_index, 'last_modify_index': last_modify_index, 'creation_index': creation_index, 'last_access_step':last_access_step , 'last_modify_step':last_modify_step, 'creation_step': creation_step})
            info_df = pd.DataFrame(info)
            info_df.to_csv('/home/runner/info.csv')
            step_statistics = []
            for step, (starting_index, ending_index) in steps.items():
                step_name = step if step == 'setup' else step.split('_')[1]
                created_file_count = info_df[info_df['creation_step'] == step_name].shape[0]
                created_never_accessed_file_count = info_df[(info_df['creation_step'] == step_name) & (info_df['last_modify_index'] == -1)].shape[0]
                modified_files_after_accessed_count = info_df[(info_df['creation_step'] == step_name) & (info_df['last_modify_index'] > info_df['last_access_index'])].shape[0]
                starting_time = list(map(int, df.iloc[starting_index]['time'].split(':')))
                if ending_index == len(df): ending_time = list(map(int, df.iloc[ending_index-1]['time'].split(':')))
                else: ending_time = list(map(int, df.iloc[ending_index]['time'].split(':')))
                hour = ending_time[0] - starting_time[0]
                if starting_time[1] > ending_time[1]:
                    minute = ending_time[1] - starting_time[1] + 60
                    hour -= 1
                else: minute = ending_time[1] - starting_time[1]
                if starting_time[2] > ending_time[2]:
                    second = ending_time[2] - starting_time[2] + 60
                    minute -= 1
                else: second = ending_time[2] - starting_time[2]
                total_seconds = second + (minute * 60) + (hour * 60 * 60)
                if step_name != '':
                    step_statistics.append({'step_name': step_name, 'number_of_created_files': created_file_count,
                     'number_of_files_created_never_accessed': created_never_accessed_file_count, 
                     'number_files_modified_after_accessed': modified_files_after_accessed_count, 'time': total_seconds})
            os.mkdir('optimizing-ci-builds-ci-analysis')
            step_df = pd.DataFrame(step_statistics)
            step_df.to_csv('/home/runner/work/open-location-code/open-location-code/optimizing-ci-builds-ci-analysis/steps.csv')
            info_df.to_csv('/home/runner/work/open-location-code/open-location-code/optimizing-ci-builds-ci-analysis/analysis.csv')
      - name: Pushes analysis to another repository
        id: push_directory
        uses: cpina/github-action-push-to-another-repository@main
        env:
          API_TOKEN_GITHUB: ${{ secrets.API_TOKEN_GITHUB }}
        with:
          source-directory: 'optimizing-ci-builds-ci-analysis'
          destination-github-username: 'optimizing-ci-builds'
          destination-repository-name: 'ci-analyzes'
          target-directory: 'open-location-code/1666188747/.github/workflows/main/testruby'
          rubocop --config rubocop.yml

  # Rust implementation. Lives in rust/.
  test-rust:
    runs-on: ubuntu-latest
    env:
      OLC_PATH: rust
    steps:
      - uses: actions/setup-python@v2
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pandas
          pip install numpy
      - run: sudo apt update
      - run: sudo apt install inotify-tools
      - run: inotifywait -mr /home/runner/work --format '%T;%w;%f;%e' --timefmt %T -o /home/runner/test.csv & echo 'basak'
      - run: touch starting_testrust_uses_160
      - run: rm starting_testrust_uses_160
      - uses: actions/checkout@v2
      - run: touch starting_testrust_test_161
      - run: rm starting_testrust_test_161
      - name: test
        run: |
          cd ${OLC_PATH}
          cargo fmt --all -- --check
          cargo build
          cargo test -- --nocapture
      - run: touch starting_finished_finished_8979874
      - run: rm starting_finished_finished_8979874
      - uses: jannekem/run-python-script-action@v1
        with:
          script: |
            import pandas as pd
            import numpy as np
            import time
            df = pd.read_csv('/home/runner/test.csv', sep = ';', names=['time', 'watched_filename', 'event_filename', 'event_name'])
            df['event_filename'] = df['event_filename'].replace(np.nan, '')
            steps = {}
            starting_indexes = df[(df['event_filename'].str.contains('starting_')) & (df['event_name'] == 'CREATE')].index.to_list() + [df.shape[0]]
            ending_indexes = [0] + df[(df['event_filename'].str.contains('starting_')) & (df['event_name'] == 'DELETE')].index.to_list()
            starting_df = df[df['event_filename'].str.contains('starting_')]
            touch_file_names = ['setup'] + [x.replace('starting_', '') for x in starting_df['event_filename'].value_counts().index.to_list()]
            for starting_index, ending_index, touch_file_name in zip(starting_indexes, ending_indexes, touch_file_names):
                steps[touch_file_name] = (ending_index, starting_index)
            df['watched_filename'] = df['watched_filename'] + df['event_filename']
            df.drop('event_filename', axis=1, inplace=True)
            df.rename(columns={'watched_filename':'file_name'}, inplace=True)
            create_df = df[df['event_name'] == 'CREATE']
            file_names = create_df['file_name'].value_counts().index.to_list()
            info = []
            for file_name in file_names:
                last_access_step = ''
                last_modify_step = ''
                creation_step = ''
                if df[(df['file_name'] == file_name) & (df['event_name'] == 'MODIFY')].shape[0] == 0: last_modify_index = -1
                else: last_modify_index = df[(df['file_name'] == file_name) & (df['event_name'] == 'MODIFY')].index.to_list()[-1]
                last_access_index = 0
                if df[(df['file_name'] == file_name) & (df['event_name'] == 'ACCESS')].shape[0] > 0:
                    last_access_index = df[(df['file_name'] == file_name) & (df['event_name'] == 'ACCESS')].index.to_list()[-1]
                else:
                    last_access_index = -1
                    last_access_step = 'Not provided'
                if last_access_index < last_modify_index:
                    try:
                        creation_index = df[(df['file_name'] == file_name) & (df['event_name'] == 'CREATE')].index.to_list()[0]
                    except:
                        creation_index = -1
                        creation_step = 'Not provided'
                    for touch_file_name, (starting_index, ending_index) in steps.items():
                        if (last_access_index > starting_index) and (last_access_index < ending_index):
                            last_access_step = touch_file_name if touch_file_name == 'setup' else touch_file_name.split('_')[1]
                        if (last_modify_index > starting_index) and (last_modify_index < ending_index):
                            last_modify_step = touch_file_name if touch_file_name == 'setup' else touch_file_name.split('_')[1]
                        if (creation_index > starting_index) and (creation_index < ending_index):
                            creation_step = touch_file_name if touch_file_name == 'setup' else touch_file_name.split('_')[1]
                    info.append({'file_name': file_name, 'last_access_index': last_access_index, 'last_modify_index': last_modify_index, 'creation_index': creation_index, 'last_access_step':last_access_step , 'last_modify_step':last_modify_step, 'creation_step': creation_step})
            info_df = pd.DataFrame(info)
            info_df.to_csv('/home/runner/info.csv')
            step_statistics = []
            for step, (starting_index, ending_index) in steps.items():
                step_name = step if step == 'setup' else step.split('_')[1]
                created_file_count = info_df[info_df['creation_step'] == step_name].shape[0]
                created_never_accessed_file_count = info_df[(info_df['creation_step'] == step_name) & (info_df['last_modify_index'] == -1)].shape[0]
                modified_files_after_accessed_count = info_df[(info_df['creation_step'] == step_name) & (info_df['last_modify_index'] > info_df['last_access_index'])].shape[0]
                starting_time = list(map(int, df.iloc[starting_index]['time'].split(':')))
                if ending_index == len(df): ending_time = list(map(int, df.iloc[ending_index-1]['time'].split(':')))
                else: ending_time = list(map(int, df.iloc[ending_index]['time'].split(':')))
                hour = ending_time[0] - starting_time[0]
                if starting_time[1] > ending_time[1]:
                    minute = ending_time[1] - starting_time[1] + 60
                    hour -= 1
                else: minute = ending_time[1] - starting_time[1]
                if starting_time[2] > ending_time[2]:
                    second = ending_time[2] - starting_time[2] + 60
                    minute -= 1
                else: second = ending_time[2] - starting_time[2]
                total_seconds = second + (minute * 60) + (hour * 60 * 60)
                if step_name != '':
                    step_statistics.append({'step_name': step_name, 'number_of_created_files': created_file_count,
                     'number_of_files_created_never_accessed': created_never_accessed_file_count, 
                     'number_files_modified_after_accessed': modified_files_after_accessed_count, 'time': total_seconds})
            os.mkdir('optimizing-ci-builds-ci-analysis')
            step_df = pd.DataFrame(step_statistics)
            step_df.to_csv('/home/runner/work/open-location-code/open-location-code/optimizing-ci-builds-ci-analysis/steps.csv')
            info_df.to_csv('/home/runner/work/open-location-code/open-location-code/optimizing-ci-builds-ci-analysis/analysis.csv')
      - name: Pushes analysis to another repository
        id: push_directory
        uses: cpina/github-action-push-to-another-repository@main
        env:
          API_TOKEN_GITHUB: ${{ secrets.API_TOKEN_GITHUB }}
        with:
          source-directory: 'optimizing-ci-builds-ci-analysis'
          destination-github-username: 'optimizing-ci-builds'
          destination-repository-name: 'ci-analyzes'
          target-directory: 'open-location-code/1666188747/.github/workflows/main/testrust'

