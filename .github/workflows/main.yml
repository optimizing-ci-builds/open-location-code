name: CI
on: [push]
jobs:
  # C implementation. Lives in c/, tested with bazel.
  test-c:
    runs-on: ubuntu-latest
    env:
      OLC_PATH: c
    steps:
      - uses: actions/setup-python@v2
        with:
          python-version: '${{ matrix.python }}'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pandas
          pip install numpy
      - run: sudo apt update
      - run: sudo apt install inotify-tools
      - run: inotifywait -mr /home/runner/work/open-location-code/open-location-code/ --format '%T;%w;%f;%e' --timefmt %T -o /home/runner/inotify-logs.csv & echo 'basak'
      - run: touch starting_testc_uses-checkout_10
      - run: rm starting_testc_uses-checkout_10
      - uses: actions/checkout@v2
      - run: touch starting_testc_test_11
      - run: rm starting_testc_test_11
      - name: test
        run: bazel test --test_output=all ${OLC_PATH}:all
      - run: touch starting_testc_checkformatting_13
      - run: rm starting_testc_checkformatting_13
      - name: check formatting
        run: cd ${OLC_PATH} && bash clang_check.sh
        
      - run: touch starting_finished_finished_8979874
        if: always()
      - run: rm starting_finished_finished_8979874
        if: always()
      - name: Execute py script # run file
        if: always()
        run: |
          python .github/workflows/script.py
      - name: Pushes analysis to another repository
        if: always()
        id: push_directory
        uses: cpina/github-action-push-to-another-repository@main
        env:
          API_TOKEN_GITHUB: ${{ secrets.API_TOKEN_GITHUB }}
        with:
          source-directory: 'optimizing-ci-builds-ci-analysis'
          destination-github-username: 'UT-SE-Research'
          destination-repository-name: 'ci-analyzes'
          target-branch: '1676582734-c797686'
          target-directory: 'open-location-code/.github/workflows/main/testc'
        continue-on-error: true
      - name: Check push directory exit code
        if: steps.push_directory.outcome == 'failure'
        run: |
          echo 'push failed, trying pull and then push'
          git stash
          git pull
          git stash apply
          while ! git push origin {time}; do
            git push
          done
  # C++ implementation. Lives in cpp/, tested with bazel.
  test-cpp:
    runs-on: ubuntu-latest
    env:
      OLC_PATH: cpp
    steps:
      - uses: actions/setup-python@v2
        with:
          python-version: '${{ matrix.python }}'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pandas
          pip install numpy
      - run: sudo apt update
      - run: sudo apt install inotify-tools
      - run: inotifywait -mr /home/runner/work/open-location-code/open-location-code/ --format '%T;%w;%f;%e' --timefmt %T -o /home/runner/inotify-logs.csv & echo 'basak'
      - run: touch starting_testcpp_uses-checkout_22
      - run: rm starting_testcpp_uses-checkout_22
      - uses: actions/checkout@v2
      - run: touch starting_testcpp_test_23
      - run: rm starting_testcpp_test_23
      - name: test
        run: bazel test --test_output=all ${OLC_PATH}:all
      - run: touch starting_testcpp_checkformatting_25
      - run: rm starting_testcpp_checkformatting_25
      - name: check formatting
        run: cd ${OLC_PATH} && bash clang_check.sh
        
      - run: touch starting_finished_finished_8979874
        if: always()
      - run: rm starting_finished_finished_8979874
        if: always()
      - name: Execute py script # run file
        if: always()
        run: |
          python .github/workflows/script.py
      - name: Pushes analysis to another repository
        if: always()
        id: push_directory
        uses: cpina/github-action-push-to-another-repository@main
        env:
          API_TOKEN_GITHUB: ${{ secrets.API_TOKEN_GITHUB }}
        with:
          source-directory: 'optimizing-ci-builds-ci-analysis'
          destination-github-username: 'UT-SE-Research'
          destination-repository-name: 'ci-analyzes'
          target-branch: '1676582734-c797686'
          target-directory: 'open-location-code/.github/workflows/main/testcpp'
        continue-on-error: true
      - name: Check push directory exit code
        if: steps.push_directory.outcome == 'failure'
        run: |
          echo 'push failed, trying pull and then push'
          git stash
          git pull
          git stash apply
          while ! git push origin {time}; do
            git push
          done
  # Dart implementation. Lives in dart/.
  test-dart:
    runs-on: ubuntu-latest
    env:
      OLC_PATH: dart
    steps:
      - uses: actions/setup-python@v2
        with:
          python-version: '${{ matrix.python }}'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pandas
          pip install numpy
      - run: sudo apt update
      - run: sudo apt install inotify-tools
      - run: inotifywait -mr /home/runner/work/open-location-code/open-location-code/ --format '%T;%w;%f;%e' --timefmt %T -o /home/runner/inotify-logs.csv & echo 'basak'
      - run: touch starting_testdart_uses-checkout_34
      - run: rm starting_testdart_uses-checkout_34
      - uses: actions/checkout@v2
      - run: touch starting_testdart_uses-setup-dart_35
      - run: rm starting_testdart_uses-setup-dart_35
      - uses: dart-lang/setup-dart@v1
      - run: touch starting_testdart_test_36
      - run: rm starting_testdart_test_36
      - name: test
        run: |
          cd ${OLC_PATH}
          pub get && pub run test
          bash checks.sh
      - run: touch starting_finished_finished_8979874
        if: always()
      - run: rm starting_finished_finished_8979874
        if: always()
      - name: Execute py script # run file
        if: always()
        run: |
          python .github/workflows/script.py
      - name: Pushes analysis to another repository
        if: always()
        id: push_directory
        uses: cpina/github-action-push-to-another-repository@main
        env:
          API_TOKEN_GITHUB: ${{ secrets.API_TOKEN_GITHUB }}
        with:
          source-directory: 'optimizing-ci-builds-ci-analysis'
          destination-github-username: 'UT-SE-Research'
          destination-repository-name: 'ci-analyzes'
          target-branch: '1676582734-c797686'
          target-directory: 'open-location-code/.github/workflows/main/testdart'
        continue-on-error: true
      - name: Check push directory exit code
        if: steps.push_directory.outcome == 'failure'
        run: |
          echo 'push failed, trying pull and then push'
          git stash
          git pull
          git stash apply
          while ! git push origin {time}; do
            git push
          done

  # Go implementation. Lives in go/. Tests fail if files have not been formatted with gofmt.
  test-go:
    runs-on: ubuntu-latest
    env:
      OLC_PATH: go
    steps:
    - uses: actions/setup-python@v2
      with:
        python-version: '${{ matrix.python }}'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pandas
        pip install numpy
    - run: sudo apt update
    - run: sudo apt install inotify-tools
    - run: inotifywait -mr /home/runner/work/open-location-code/open-location-code/ --format '%T;%w;%f;%e' --timefmt %T -o /home/runner/inotify-logs.csv & echo 'basak'
    - run: touch starting_testgo_uses-checkout_48
    - run: rm starting_testgo_uses-checkout_48
    - uses: actions/checkout@v2
    - run: touch starting_testgo_uses-setup-go_49
    - run: rm starting_testgo_uses-setup-go_49
    - uses: actions/setup-go@v2
      with:
        go-version: 1.17
    - run: touch starting_testgo_test_52
    - run: rm starting_testgo_test_52
    - name: test
      run: |
        cd ${OLC_PATH}
        diff -u <(echo -n) <(gofmt -d -s ./)
        go test -bench=. ./ -v
    - run: touch starting_testgo_testgridserver_57
    - run: rm starting_testgo_testgridserver_57
    - name: test-gridserver
      run: |
        cd tile_server/gridserver
        go test ./ -v
        
    - run: touch starting_finished_finished_8979874
      if: always()
    - run: rm starting_finished_finished_8979874
      if: always()
    - name: Execute py script # run file
      if: always()
      run: |
        python .github/workflows/script.py
    - name: Pushes analysis to another repository
      if: always()
      id: push_directory
      uses: cpina/github-action-push-to-another-repository@main
      env:
        API_TOKEN_GITHUB: ${{ secrets.API_TOKEN_GITHUB }}
      with:
        source-directory: 'optimizing-ci-builds-ci-analysis'
        destination-github-username: 'UT-SE-Research'
        destination-repository-name: 'ci-analyzes'
        target-branch: '1676582734-c797686'
        target-directory: 'open-location-code/.github/workflows/main/testgo'
      continue-on-error: true
    - name: Check push directory exit code
      if: steps.push_directory.outcome == 'failure'
      run: |
        echo 'push failed, trying pull and then push'
        git stash
        git pull
        git stash apply
        while ! git push origin {time}; do
          git push
        done
  # Java implementation. Lives in java/, tested with bazel and maven.     
  test-java:
    runs-on: ubuntu-latest
    env:
      OLC_PATH: java
    strategy:
      matrix:
        java: [ '8', '11', '16', '17' ]
    name: test-java-${{ matrix.java }}
    steps:
      - uses: actions/setup-python@v2
        with:
          python-version: '${{ matrix.python }}'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pandas
          pip install numpy
      - run: sudo apt update
      - run: sudo apt install inotify-tools
      - run: inotifywait -mr /home/runner/work/open-location-code/open-location-code/ --format '%T;%w;%f;%e' --timefmt %T -o /home/runner/inotify-logs.csv & echo 'basak'
      - run: touch starting_testjava_uses-checkout_72
      - run: rm starting_testjava_uses-checkout_72
      - uses: actions/checkout@v2
      - run: touch starting_testjava_Setupjava_73
      - run: rm starting_testjava_Setupjava_73
      - name: Setup java
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: ${{ matrix.java }}
      - run: touch starting_testjava_test_78
      - run: rm starting_testjava_test_78
      - name: test
        run: bazel test --test_output=all ${OLC_PATH}:all && cd ${OLC_PATH} && mvn package
        
      - run: touch starting_finished_finished_8979874
        if: always()
      - run: rm starting_finished_finished_8979874
        if: always()
      - name: Execute py script # run file
        if: always()
        run: |
          python .github/workflows/script.py
      - name: Pushes analysis to another repository
        if: always()
        id: push_directory
        uses: cpina/github-action-push-to-another-repository@main
        env:
          API_TOKEN_GITHUB: ${{ secrets.API_TOKEN_GITHUB }}
        with:
          source-directory: 'optimizing-ci-builds-ci-analysis'
          destination-github-username: 'UT-SE-Research'
          destination-repository-name: 'ci-analyzes'
          target-branch: '1676582734-c797686'
          target-directory: 'open-location-code/.github/workflows/main/testjava_java_${{ matrix.java }}'
        continue-on-error: true
      - name: Check push directory exit code
        if: steps.push_directory.outcome == 'failure'
        run: |
          echo 'push failed, trying pull and then push'
          git stash
          git pull
          git stash apply
          while ! git push origin {time}; do
            git push
          done
  # Javascript Closure library implementation. Lives in js/closure, tested with bazel.  
  test-js-closure:
    runs-on: ubuntu-latest
    env:
      OLC_PATH: js/closure
    steps:
      - uses: actions/setup-python@v2
        with:
          python-version: '${{ matrix.python }}'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pandas
          pip install numpy
      - run: sudo apt update
      - run: sudo apt install inotify-tools
      - run: inotifywait -mr /home/runner/work/open-location-code/open-location-code/ --format '%T;%w;%f;%e' --timefmt %T -o /home/runner/inotify-logs.csv & echo 'basak'
      - run: touch starting_testjsclosure_uses-checkout_87
      - run: rm starting_testjsclosure_uses-checkout_87
      - uses: actions/checkout@v2
      - run: touch starting_testjsclosure_test_88
      - run: rm starting_testjsclosure_test_88
      - name: test
        run: |
          bazel test ${OLC_PATH}:all
          cd js && npm install && ./node_modules/.bin/eslint closure/*js
      - run: touch starting_finished_finished_8979874
        if: always()
      - run: rm starting_finished_finished_8979874
        if: always()
      - name: Execute py script # run file
        if: always()
        run: |
          python .github/workflows/script.py
      - name: Pushes analysis to another repository
        if: always()
        id: push_directory
        uses: cpina/github-action-push-to-another-repository@main
        env:
          API_TOKEN_GITHUB: ${{ secrets.API_TOKEN_GITHUB }}
        with:
          source-directory: 'optimizing-ci-builds-ci-analysis'
          destination-github-username: 'UT-SE-Research'
          destination-repository-name: 'ci-analyzes'
          target-branch: '1676582734-c797686'
          target-directory: 'open-location-code/.github/workflows/main/testjsclosure'
        continue-on-error: true
      - name: Check push directory exit code
        if: steps.push_directory.outcome == 'failure'
        run: |
          echo 'push failed, trying pull and then push'
          git stash
          git pull
          git stash apply
          while ! git push origin {time}; do
            git push
          done

  # Javascript implementation. Lives in js/.
  test-js:
    runs-on: ubuntu-latest
    env:
      OLC_PATH: js
    steps:
      - uses: actions/setup-python@v2
        with:
          python-version: '${{ matrix.python }}'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pandas
          pip install numpy
      - run: sudo apt update
      - run: sudo apt install inotify-tools
      - run: inotifywait -mr /home/runner/work/open-location-code/open-location-code/ --format '%T;%w;%f;%e' --timefmt %T -o /home/runner/inotify-logs.csv & echo 'basak'
      - run: touch starting_testjs_uses-checkout_99
      - run: rm starting_testjs_uses-checkout_99
      - uses: actions/checkout@v2
      - run: touch starting_testjs_test_100
      - run: rm starting_testjs_test_100
      - name: test
        run: |
          cd ${OLC_PATH}
          bash checks.sh
          
      - run: touch starting_finished_finished_8979874
        if: always()
      - run: rm starting_finished_finished_8979874
        if: always()
      - name: Execute py script # run file
        if: always()
        run: |
          python .github/workflows/script.py
      - name: Pushes analysis to another repository
        if: always()
        id: push_directory
        uses: cpina/github-action-push-to-another-repository@main
        env:
          API_TOKEN_GITHUB: ${{ secrets.API_TOKEN_GITHUB }}
        with:
          source-directory: 'optimizing-ci-builds-ci-analysis'
          destination-github-username: 'UT-SE-Research'
          destination-repository-name: 'ci-analyzes'
          target-branch: '1676582734-c797686'
          target-directory: 'open-location-code/.github/workflows/main/testjs'
        continue-on-error: true
      - name: Check push directory exit code
        if: steps.push_directory.outcome == 'failure'
        run: |
          echo 'push failed, trying pull and then push'
          git stash
          git pull
          git stash apply
          while ! git push origin {time}; do
            git push
          done
  # Python implementation. Lives in python/, tested with bazel.
  test-python:
    runs-on: ubuntu-latest
    env:
      OLC_PATH: python
    strategy:
      matrix:
        python: [ '2.7', '3.6', '3.7', '3.8' ]
    name: test-python-${{ matrix.python }}
    steps:
      - uses: actions/setup-python@v2
        with:
          python-version: '${{ matrix.python }}'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pandas
          pip install numpy
      - run: sudo apt update
      - run: sudo apt install inotify-tools
      - run: inotifywait -mr /home/runner/work/open-location-code/open-location-code/ --format '%T;%w;%f;%e' --timefmt %T -o /home/runner/inotify-logs.csv & echo 'basak'
      - run: touch starting_testpython_uses-checkout_115
      - run: rm starting_testpython_uses-checkout_115
      - uses: actions/checkout@v2
      - run: touch starting_testpython_SetupPython_116
      - run: rm starting_testpython_SetupPython_116
      - name: Set up Python 
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}
      - run: touch starting_testpython_test_120
      - run: rm starting_testpython_test_120
      - name: test
        run: bazel test --test_output=all ${OLC_PATH}:all
      - run: touch starting_testpython_checkformatting_122
      - run: rm starting_testpython_checkformatting_122
      - name: check formatting
        run: |
          cd ${OLC_PATH}
          pip install yapf
          DIFF=`python -m yapf --diff *py`
          if [ $? -eq 0 ]; then
            echo -e "Python files are correctly formatted"
            exit 0
          else 
            echo -e "Python files have formatting errors"
            echo -e "These must be corrected using format_check.sh"
            echo "$DIFF"
          fi
          exit 1
          
      - run: touch starting_finished_finished_8979874
        if: always()
      - run: rm starting_finished_finished_8979874
        if: always()
      - name: Execute py script # run file
        if: always()
        run: |
          python .github/workflows/script.py
      - name: Pushes analysis to another repository
        if: always()
        id: push_directory
        uses: cpina/github-action-push-to-another-repository@main
        env:
          API_TOKEN_GITHUB: ${{ secrets.API_TOKEN_GITHUB }}
        with:
          source-directory: 'optimizing-ci-builds-ci-analysis'
          destination-github-username: 'UT-SE-Research'
          destination-repository-name: 'ci-analyzes'
          target-branch: '1676582734-c797686'
          target-directory: 'open-location-code/.github/workflows/main/testpython_python_${{ matrix.python }}'
        continue-on-error: true
      - name: Check push directory exit code
        if: steps.push_directory.outcome == 'failure'
        run: |
          echo 'push failed, trying pull and then push'
          git stash
          git pull
          git stash apply
          while ! git push origin {time}; do
            git push
          done
  # Ruby implementation. Lives in ruby/.
  test-ruby:
    runs-on: ubuntu-latest
    env:
      OLC_PATH: ruby
    steps:
      - uses: actions/setup-python@v2
        with:
          python-version: '${{ matrix.python }}'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pandas
          pip install numpy
      - run: sudo apt update
      - run: sudo apt install inotify-tools
      - run: inotifywait -mr /home/runner/work/open-location-code/open-location-code/ --format '%T;%w;%f;%e' --timefmt %T -o /home/runner/inotify-logs.csv & echo 'basak'
      - run: touch starting_testruby_uses-checkout_143
      - run: rm starting_testruby_uses-checkout_143
      - uses: actions/checkout@v2
      - run: touch starting_testruby_uses-setup-ruby_144
      - run: rm starting_testruby_uses-setup-ruby_144
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: '2.6'
      - run: touch starting_testruby_test_147
      - run: rm starting_testruby_test_147
      - name: test
        run: |
          gem install rubocop
          gem install test-unit
          cd ${OLC_PATH} && ruby test/plus_codes_test.rb
          rubocop --config rubocop.yml
      - run: touch starting_finished_finished_8979874
        if: always()
      - run: rm starting_finished_finished_8979874
        if: always()
      - name: Execute py script # run file
        if: always()
        run: |
          python .github/workflows/script.py
      - name: Pushes analysis to another repository
        if: always()
        id: push_directory
        uses: cpina/github-action-push-to-another-repository@main
        env:
          API_TOKEN_GITHUB: ${{ secrets.API_TOKEN_GITHUB }}
        with:
          source-directory: 'optimizing-ci-builds-ci-analysis'
          destination-github-username: 'UT-SE-Research'
          destination-repository-name: 'ci-analyzes'
          target-branch: '1676582734-c797686'
          target-directory: 'open-location-code/.github/workflows/main/testruby'
        continue-on-error: true
      - name: Check push directory exit code
        if: steps.push_directory.outcome == 'failure'
        run: |
          echo 'push failed, trying pull and then push'
          git stash
          git pull
          git stash apply
          while ! git push origin {time}; do
            git push
          done

  # Rust implementation. Lives in rust/.
  test-rust:
    runs-on: ubuntu-latest
    env:
      OLC_PATH: rust
    steps:
      - uses: actions/setup-python@v2
        with:
          python-version: '${{ matrix.python }}'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pandas
          pip install numpy
      - run: sudo apt update
      - run: sudo apt install inotify-tools
      - run: inotifywait -mr /home/runner/work/open-location-code/open-location-code/ --format '%T;%w;%f;%e' --timefmt %T -o /home/runner/inotify-logs.csv & echo 'basak'
      - run: touch starting_testrust_uses-checkout_160
      - run: rm starting_testrust_uses-checkout_160
      - uses: actions/checkout@v2
      - run: touch starting_testrust_test_161
      - run: rm starting_testrust_test_161
      - name: test
        run: |
          cd ${OLC_PATH}
          cargo fmt --all -- --check
          cargo build
          cargo test -- --nocapture
      - run: touch starting_finished_finished_8979874
        if: always()
      - run: rm starting_finished_finished_8979874
        if: always()
      - name: Execute py script # run file
        if: always()
        run: |
          python .github/workflows/script.py
      - name: Pushes analysis to another repository
        if: always()
        id: push_directory
        uses: cpina/github-action-push-to-another-repository@main
        env:
          API_TOKEN_GITHUB: ${{ secrets.API_TOKEN_GITHUB }}
        with:
          source-directory: 'optimizing-ci-builds-ci-analysis'
          destination-github-username: 'UT-SE-Research'
          destination-repository-name: 'ci-analyzes'
          target-branch: '1676582734-c797686'
          target-directory: 'open-location-code/.github/workflows/main/testrust'
        continue-on-error: true
      - name: Check push directory exit code
        if: steps.push_directory.outcome == 'failure'
        run: |
          echo 'push failed, trying pull and then push'
          git stash
          git pull
          git stash apply
          while ! git push origin {time}; do
            git push
          done
